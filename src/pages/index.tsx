import React, { useEffect } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import PageLayout from "~/components/PageLayout";
import { toast } from "react-hot-toast";
import { useInView } from "react-intersection-observer";

import { META_TITLE } from "~/utils/constants";
import { api } from "~/utils/api";
import { LoadingSpinner } from "~/components/LoadingSpinner";
import Question from "~/components/Question";

const Home: NextPage = () => {
  const { ref, inView } = useInView();
  const {
    data: questions,
    isLoading: loadingQuestions,
    error,
    isFetchingNextPage,
    fetchNextPage,
    hasNextPage,
  } = api.question.getAll.useInfiniteQuery(
    { limit: 10 },
    { getNextPageParam: (lastPage) => lastPage.nextCursor ?? false }
  );

  if (error) {
    toast.error(error.message);
  }

  useEffect(() => {
    if (inView && hasNextPage) {
      const fetchMoreQuestions = async () => await fetchNextPage();
      void fetchMoreQuestions();
    }
  }, [inView, hasNextPage, fetchNextPage]);

  return (
    <>
      <Head>
        <title>{META_TITLE}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <section className="mt-5">
          {loadingQuestions ? (
            <LoadingSpinner />
          ) : (
            <>
              <div className="hero my-10">
                <h1 className="mb-2 text-3xl">Question&apos;s History</h1>
                <p>
                  Lorem ipsum dolor, sit amet consectetur adipisicing elit.
                  Accusamus, cupiditate nostrum itaque, est molestiae fuga
                  voluptas provident reiciendis temporibus necessitatibus
                  commodi facere aliquam ullam numquam. Tempora exercitationem
                  magnam adipisci dolor iquam ullam numquam. Tempora
                  exercitationem magnam adipisci dolor.
                </p>
              </div>
              <ul>
                {questions?.pages?.map((page) => (
                  <React.Fragment key={page.nextCursor ?? "last page"}>
                    {page.questions.map((question) => (
                      <Question key={question.content.id} {...question} />
                    ))}
                  </React.Fragment>
                ))}
              </ul>
              {isFetchingNextPage && (
                <div className="flex justify-center py-10">
                  <LoadingSpinner size={40} />
                </div>
              )}
              <div
                className="invisible"
                ref={ref}
                data-loadmorequestions="load-more-questions"
              />
            </>
          )}
        </section>
      </PageLayout>
    </>
  );
};

export default Home;
