import Head from "next/head";
import type { NextPage } from "next";
import { useRouter } from "next/router";

import { api } from "~/utils/api";
import { META_TITLE } from "~/utils/constants";

import PageLayout from "~/components/PageLayout";
import { LoadingSpinner } from "~/components/LoadingSpinner";
import SubmitAnswerForm from "~/components/SubmitAnswerForm";
import { toast } from "react-hot-toast";
import Answer from "~/components/Answer";

const SingeQuestionPage: NextPage = () => {
  // trpc cache context
  const ctx = api.useContext();

  const router = useRouter();
  const { id: questionId } = router.query;

  // render this client-side until fix with SSG or wait till nex13 release
  const { isLoading: loadingQuestion, data } = api.question.getById.useQuery(
    { id: questionId as string },
    { enabled: !!questionId }
  );

  const { mutate: submitAnswer, isLoading: submittingAnswer } =
    api.answer.add.useMutation({
      onSuccess: () => {
        toast.success("Answer successfully added");
        void ctx.question.getById.invalidate({ id: questionId as string });
      },
    });

  return (
    <>
      <Head>
        <title>{META_TITLE}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <section className="mt-5">
          {loadingQuestion ? (
            <LoadingSpinner />
          ) : (
            <div className="flex items-center justify-between">
              <div className="question-wrapper flex-grow">
                <h1 className="mb-5 text-3xl">
                  {data?.question?.content.title}
                </h1>
                <div className="answerFormAndAnswerListWrapper flex gap-10">
                  <div className="answerForm flex-1">
                    {data?.question?.content.details && (
                      <p>{data?.question?.content?.details}</p>
                    )}
                    {!data?.question.isUserOwner && (
                      <div className=" py-5">
                        <SubmitAnswerForm
                          mutationInProgress={submittingAnswer}
                          onSubmit={(data) =>
                            submitAnswer({
                              ...data,
                              questionId: questionId as string,
                            })
                          }
                        />
                      </div>
                    )}
                  </div>
                  <div className="answer-list flex-1 border-l border-slate-400 pl-5">
                    <h2 className="text-2xl">Raspunsuri</h2>
                    <ul className="mt-5">
                      {data?.answers?.map((answer) => (
                        <Answer key={answer.content.id} {...answer} />
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
              {data?.question.isUserOwner && (
                <div className="resolve-question">
                  <button className="rounded-md  p-4 font-bold underline">
                    Resolve
                  </button>
                </div>
              )}
            </div>
          )}
        </section>
      </PageLayout>
    </>
  );
};

export default SingeQuestionPage;
