import React, { useEffect } from "react";
import Head from "next/head";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import { toast } from "react-hot-toast";
import { useInView } from "react-intersection-observer";

import { api } from "~/utils/api";
import { META_TITLE } from "~/utils/constants";

import PageLayout from "~/components/PageLayout";
import { LoadingSpinner } from "~/components/LoadingSpinner";
import SubmitAnswerForm from "~/components/SubmitAnswerForm";
import Answer from "~/components/Answer";
import { useState } from "react";
import Modal from "~/components/Modal";

const SingeQuestionPage: NextPage = () => {
  const { ref, inView } = useInView();
  const [showResolveModal, setShowResolveModal] = useState(false);

  // trpc cache context
  const ctx = api.useContext();

  const router = useRouter();
  const { id: questionId } = router.query;

  // render this client-side until fix with SSG or wait till nex13 release
  const { isLoading: loadingQuestion, data } = api.question.getById.useQuery(
    { id: questionId as string },
    { enabled: !!questionId }
  );

  const {
    isLoading: loadingAnswers,
    data: answers,
    isFetchingNextPage,
    fetchNextPage,
    hasNextPage,
  } = api.answer.getAll.useInfiniteQuery(
    { limit: 8, questionId: questionId as string },
    {
      enabled: !!questionId,
      getNextPageParam: (lastPage) => lastPage.nextCursor ?? false,
    }
  );

  const { mutate: submitAnswer, isLoading: submittingAnswer } =
    api.answer.add.useMutation({
      onSuccess: () => {
        toast.success("Answer successfully added");
        void ctx.answer.getAll.invalidate({ questionId: questionId as string });
      },
      onError: (error) => {
        toast.error(error.message);
      },
    });

  const { isLoading: updatingQuestion, mutate: updateQuestion } =
    api.question.update.useMutation({
      onSuccess: () => {
        toast.success("Question successfully updated");
        void ctx.question.getById.invalidate({ id: questionId as string });
        setShowResolveModal(false);
      },
    });

  useEffect(() => {
    if (inView && hasNextPage) {
      const fetchMoreQuestions = async () => await fetchNextPage();
      void fetchMoreQuestions();
    }
  }, [inView, hasNextPage, fetchNextPage]);

  return (
    <>
      <Head>
        <title>{META_TITLE}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <section className="mt-5">
          {loadingQuestion ? (
            <LoadingSpinner />
          ) : (
            <section className="content-wrapper relative flex gap-10">
              <div className="left-side sticky top-5 basis-4/12 self-start">
                <div className="title-wrapper mb-5">
                  {data?.question.isUserOwner &&
                    !data.question.content.isSolved && (
                      <div className="resolve-question mb-3">
                        <button
                          onClick={() => setShowResolveModal(true)}
                          className="font-bold uppercase underline"
                        >
                          Resolve
                        </button>
                      </div>
                    )}
                  <h1 className="text-3xl">{data?.question?.content.title}</h1>
                  {data?.question?.content.details && (
                    <>
                      <p>{data?.question?.content?.details}</p>
                    </>
                  )}
                </div>
                {data?.question.content.isSolved ? (
                  <p className="mt-5">aceasta intrebare a fost rezolvata</p>
                ) : (
                  <>
                    <div className="answerForm">
                      <div className=" py-5">
                        <SubmitAnswerForm
                          mutationInProgress={submittingAnswer}
                          onSubmit={(data) =>
                            submitAnswer({
                              ...data,
                              questionId: questionId as string,
                            })
                          }
                        />
                      </div>
                    </div>
                  </>
                )}
              </div>
              {loadingAnswers ? (
                <LoadingSpinner />
              ) : (
                <aside className="right-side basis-8/12">
                  <div className="answer-list pl-5">
                    <ul className="mt-5">
                      {answers?.pages?.map((page) => (
                        <React.Fragment key={page.nextCursor ?? "last page"}>
                          {page.answers.map((answer) => (
                            <Answer key={answer.content.id} {...answer} />
                          ))}
                        </React.Fragment>
                      ))}
                    </ul>
                    {isFetchingNextPage && (
                      <div className="flex justify-center py-10">
                        <LoadingSpinner size={40} />
                      </div>
                    )}
                    <div
                      className="invisible"
                      ref={ref}
                      data-loadmorequestions="load-more-questions"
                    />
                  </div>
                </aside>
              )}
            </section>
          )}
        </section>
        <Modal
          open={showResolveModal}
          setOpen={setShowResolveModal}
          title="Inchide intrebarea"
          description="Odata ce intrebarea este inchisa, nu mai poate fi modificata. Raspunsurile vor fi in continuare vizibile!"
        >
          {updatingQuestion ? (
            <LoadingSpinner />
          ) : (
            <button
              onClick={() =>
                updateQuestion({
                  isSolved: true,
                  questionId: questionId as string,
                })
              }
              className="mb-3 w-1/2 rounded bg-green-500 px-4 py-2 font-semibold uppercase text-white transition-all hover:bg-green-600"
            >
              inchide
            </button>
          )}
        </Modal>
      </PageLayout>
    </>
  );
};

export default SingeQuestionPage;
